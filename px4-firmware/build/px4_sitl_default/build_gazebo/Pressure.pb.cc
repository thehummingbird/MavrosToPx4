// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Pressure.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Pressure.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sensor_msgs {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Pressure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pressure_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Pressure_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_Pressure_2eproto() {
  protobuf_AddDesc_Pressure_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Pressure.proto");
  GOOGLE_CHECK(file != NULL);
  Pressure_descriptor_ = file->message_type(0);
  static const int Pressure_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pressure, time_usec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pressure, temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pressure, absolute_pressure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pressure, pressure_altitude_),
  };
  Pressure_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Pressure_descriptor_,
      Pressure::default_instance_,
      Pressure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pressure, _has_bits_[0]),
      -1,
      -1,
      sizeof(Pressure),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pressure, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Pressure_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Pressure_descriptor_, &Pressure::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Pressure_2eproto() {
  delete Pressure::default_instance_;
  delete Pressure_reflection_;
}

void protobuf_AddDesc_Pressure_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_Pressure_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016Pressure.proto\022\020sensor_msgs.msgs\"h\n\010Pr"
    "essure\022\021\n\ttime_usec\030\001 \002(\003\022\023\n\013temperature"
    "\030\002 \002(\002\022\031\n\021absolute_pressure\030\003 \002(\002\022\031\n\021pre"
    "ssure_altitude\030\004 \002(\002", 140);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Pressure.proto", &protobuf_RegisterTypes);
  Pressure::default_instance_ = new Pressure();
  Pressure::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Pressure_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Pressure_2eproto {
  StaticDescriptorInitializer_Pressure_2eproto() {
    protobuf_AddDesc_Pressure_2eproto();
  }
} static_descriptor_initializer_Pressure_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pressure::kTimeUsecFieldNumber;
const int Pressure::kTemperatureFieldNumber;
const int Pressure::kAbsolutePressureFieldNumber;
const int Pressure::kPressureAltitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pressure::Pressure()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensor_msgs.msgs.Pressure)
}

void Pressure::InitAsDefaultInstance() {
}

Pressure::Pressure(const Pressure& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sensor_msgs.msgs.Pressure)
}

void Pressure::SharedCtor() {
  _cached_size_ = 0;
  time_usec_ = GOOGLE_LONGLONG(0);
  temperature_ = 0;
  absolute_pressure_ = 0;
  pressure_altitude_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pressure::~Pressure() {
  // @@protoc_insertion_point(destructor:sensor_msgs.msgs.Pressure)
  SharedDtor();
}

void Pressure::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pressure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pressure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pressure_descriptor_;
}

const Pressure& Pressure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pressure_2eproto();
  return *default_instance_;
}

Pressure* Pressure::default_instance_ = NULL;

Pressure* Pressure::New(::google::protobuf::Arena* arena) const {
  Pressure* n = new Pressure;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pressure::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_msgs.msgs.Pressure)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Pressure, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Pressure*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(time_usec_, pressure_altitude_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Pressure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensor_msgs.msgs.Pressure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time_usec = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_usec_)));
          set_has_time_usec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_temperature;
        break;
      }

      // required float temperature = 2;
      case 2: {
        if (tag == 21) {
         parse_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &temperature_)));
          set_has_temperature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_absolute_pressure;
        break;
      }

      // required float absolute_pressure = 3;
      case 3: {
        if (tag == 29) {
         parse_absolute_pressure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &absolute_pressure_)));
          set_has_absolute_pressure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_pressure_altitude;
        break;
      }

      // required float pressure_altitude = 4;
      case 4: {
        if (tag == 37) {
         parse_pressure_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pressure_altitude_)));
          set_has_pressure_altitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensor_msgs.msgs.Pressure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensor_msgs.msgs.Pressure)
  return false;
#undef DO_
}

void Pressure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensor_msgs.msgs.Pressure)
  // required int64 time_usec = 1;
  if (has_time_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time_usec(), output);
  }

  // required float temperature = 2;
  if (has_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->temperature(), output);
  }

  // required float absolute_pressure = 3;
  if (has_absolute_pressure()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->absolute_pressure(), output);
  }

  // required float pressure_altitude = 4;
  if (has_pressure_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pressure_altitude(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sensor_msgs.msgs.Pressure)
}

::google::protobuf::uint8* Pressure::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensor_msgs.msgs.Pressure)
  // required int64 time_usec = 1;
  if (has_time_usec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time_usec(), target);
  }

  // required float temperature = 2;
  if (has_temperature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->temperature(), target);
  }

  // required float absolute_pressure = 3;
  if (has_absolute_pressure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->absolute_pressure(), target);
  }

  // required float pressure_altitude = 4;
  if (has_pressure_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pressure_altitude(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_msgs.msgs.Pressure)
  return target;
}

int Pressure::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sensor_msgs.msgs.Pressure)
  int total_size = 0;

  if (has_time_usec()) {
    // required int64 time_usec = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_usec());
  }

  if (has_temperature()) {
    // required float temperature = 2;
    total_size += 1 + 4;
  }

  if (has_absolute_pressure()) {
    // required float absolute_pressure = 3;
    total_size += 1 + 4;
  }

  if (has_pressure_altitude()) {
    // required float pressure_altitude = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
int Pressure::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sensor_msgs.msgs.Pressure)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int64 time_usec = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_usec());

    // required float temperature = 2;
    total_size += 1 + 4;

    // required float absolute_pressure = 3;
    total_size += 1 + 4;

    // required float pressure_altitude = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pressure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensor_msgs.msgs.Pressure)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Pressure* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Pressure>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensor_msgs.msgs.Pressure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensor_msgs.msgs.Pressure)
    MergeFrom(*source);
  }
}

void Pressure::MergeFrom(const Pressure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensor_msgs.msgs.Pressure)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_usec()) {
      set_time_usec(from.time_usec());
    }
    if (from.has_temperature()) {
      set_temperature(from.temperature());
    }
    if (from.has_absolute_pressure()) {
      set_absolute_pressure(from.absolute_pressure());
    }
    if (from.has_pressure_altitude()) {
      set_pressure_altitude(from.pressure_altitude());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Pressure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensor_msgs.msgs.Pressure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pressure::CopyFrom(const Pressure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_msgs.msgs.Pressure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pressure::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Pressure::Swap(Pressure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pressure::InternalSwap(Pressure* other) {
  std::swap(time_usec_, other->time_usec_);
  std::swap(temperature_, other->temperature_);
  std::swap(absolute_pressure_, other->absolute_pressure_);
  std::swap(pressure_altitude_, other->pressure_altitude_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pressure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pressure_descriptor_;
  metadata.reflection = Pressure_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pressure

// required int64 time_usec = 1;
bool Pressure::has_time_usec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Pressure::set_has_time_usec() {
  _has_bits_[0] |= 0x00000001u;
}
void Pressure::clear_has_time_usec() {
  _has_bits_[0] &= ~0x00000001u;
}
void Pressure::clear_time_usec() {
  time_usec_ = GOOGLE_LONGLONG(0);
  clear_has_time_usec();
}
 ::google::protobuf::int64 Pressure::time_usec() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Pressure.time_usec)
  return time_usec_;
}
 void Pressure::set_time_usec(::google::protobuf::int64 value) {
  set_has_time_usec();
  time_usec_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Pressure.time_usec)
}

// required float temperature = 2;
bool Pressure::has_temperature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Pressure::set_has_temperature() {
  _has_bits_[0] |= 0x00000002u;
}
void Pressure::clear_has_temperature() {
  _has_bits_[0] &= ~0x00000002u;
}
void Pressure::clear_temperature() {
  temperature_ = 0;
  clear_has_temperature();
}
 float Pressure::temperature() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Pressure.temperature)
  return temperature_;
}
 void Pressure::set_temperature(float value) {
  set_has_temperature();
  temperature_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Pressure.temperature)
}

// required float absolute_pressure = 3;
bool Pressure::has_absolute_pressure() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Pressure::set_has_absolute_pressure() {
  _has_bits_[0] |= 0x00000004u;
}
void Pressure::clear_has_absolute_pressure() {
  _has_bits_[0] &= ~0x00000004u;
}
void Pressure::clear_absolute_pressure() {
  absolute_pressure_ = 0;
  clear_has_absolute_pressure();
}
 float Pressure::absolute_pressure() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Pressure.absolute_pressure)
  return absolute_pressure_;
}
 void Pressure::set_absolute_pressure(float value) {
  set_has_absolute_pressure();
  absolute_pressure_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Pressure.absolute_pressure)
}

// required float pressure_altitude = 4;
bool Pressure::has_pressure_altitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Pressure::set_has_pressure_altitude() {
  _has_bits_[0] |= 0x00000008u;
}
void Pressure::clear_has_pressure_altitude() {
  _has_bits_[0] &= ~0x00000008u;
}
void Pressure::clear_pressure_altitude() {
  pressure_altitude_ = 0;
  clear_has_pressure_altitude();
}
 float Pressure::pressure_altitude() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Pressure.pressure_altitude)
  return pressure_altitude_;
}
 void Pressure::set_pressure_altitude(float value) {
  set_has_pressure_altitude();
  pressure_altitude_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Pressure.pressure_altitude)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace sensor_msgs

// @@protoc_insertion_point(global_scope)
