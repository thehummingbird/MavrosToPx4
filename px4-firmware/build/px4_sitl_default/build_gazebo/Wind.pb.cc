// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Wind.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Wind.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace physics_msgs {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Wind_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Wind_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Wind_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_Wind_2eproto() {
  protobuf_AddDesc_Wind_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Wind.proto");
  GOOGLE_CHECK(file != NULL);
  Wind_descriptor_ = file->message_type(0);
  static const int Wind_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wind, frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wind, time_usec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wind, force_),
  };
  Wind_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Wind_descriptor_,
      Wind::default_instance_,
      Wind_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wind, _has_bits_[0]),
      -1,
      -1,
      sizeof(Wind),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wind, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Wind_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Wind_descriptor_, &Wind::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Wind_2eproto() {
  delete Wind::default_instance_;
  delete Wind_reflection_;
}

void protobuf_AddDesc_Wind_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_Wind_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_vector3d_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nWind.proto\022\021physics_msgs.msgs\032\016vector3"
    "d.proto\"Q\n\004Wind\022\020\n\010frame_id\030\001 \002(\t\022\021\n\ttim"
    "e_usec\030\002 \002(\003\022$\n\005force\030\003 \002(\0132\025.gazebo.msg"
    "s.Vector3d", 130);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Wind.proto", &protobuf_RegisterTypes);
  Wind::default_instance_ = new Wind();
  Wind::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Wind_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Wind_2eproto {
  StaticDescriptorInitializer_Wind_2eproto() {
    protobuf_AddDesc_Wind_2eproto();
  }
} static_descriptor_initializer_Wind_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Wind::kFrameIdFieldNumber;
const int Wind::kTimeUsecFieldNumber;
const int Wind::kForceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Wind::Wind()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:physics_msgs.msgs.Wind)
}

void Wind::InitAsDefaultInstance() {
  force_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
}

Wind::Wind(const Wind& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:physics_msgs.msgs.Wind)
}

void Wind::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  frame_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_usec_ = GOOGLE_LONGLONG(0);
  force_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Wind::~Wind() {
  // @@protoc_insertion_point(destructor:physics_msgs.msgs.Wind)
  SharedDtor();
}

void Wind::SharedDtor() {
  frame_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete force_;
  }
}

void Wind::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Wind::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Wind_descriptor_;
}

const Wind& Wind::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Wind_2eproto();
  return *default_instance_;
}

Wind* Wind::default_instance_ = NULL;

Wind* Wind::New(::google::protobuf::Arena* arena) const {
  Wind* n = new Wind;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Wind::Clear() {
// @@protoc_insertion_point(message_clear_start:physics_msgs.msgs.Wind)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_frame_id()) {
      frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    time_usec_ = GOOGLE_LONGLONG(0);
    if (has_force()) {
      if (force_ != NULL) force_->::gazebo::msgs::Vector3d::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Wind::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:physics_msgs.msgs.Wind)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string frame_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frame_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->frame_id().data(), this->frame_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "physics_msgs.msgs.Wind.frame_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_usec;
        break;
      }

      // required int64 time_usec = 2;
      case 2: {
        if (tag == 16) {
         parse_time_usec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_usec_)));
          set_has_time_usec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_force;
        break;
      }

      // required .gazebo.msgs.Vector3d force = 3;
      case 3: {
        if (tag == 26) {
         parse_force:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_force()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:physics_msgs.msgs.Wind)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:physics_msgs.msgs.Wind)
  return false;
#undef DO_
}

void Wind::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:physics_msgs.msgs.Wind)
  // required string frame_id = 1;
  if (has_frame_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), this->frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "physics_msgs.msgs.Wind.frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->frame_id(), output);
  }

  // required int64 time_usec = 2;
  if (has_time_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time_usec(), output);
  }

  // required .gazebo.msgs.Vector3d force = 3;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->force_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:physics_msgs.msgs.Wind)
}

::google::protobuf::uint8* Wind::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:physics_msgs.msgs.Wind)
  // required string frame_id = 1;
  if (has_frame_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), this->frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "physics_msgs.msgs.Wind.frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->frame_id(), target);
  }

  // required int64 time_usec = 2;
  if (has_time_usec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time_usec(), target);
  }

  // required .gazebo.msgs.Vector3d force = 3;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->force_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:physics_msgs.msgs.Wind)
  return target;
}

int Wind::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:physics_msgs.msgs.Wind)
  int total_size = 0;

  if (has_frame_id()) {
    // required string frame_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->frame_id());
  }

  if (has_time_usec()) {
    // required int64 time_usec = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_usec());
  }

  if (has_force()) {
    // required .gazebo.msgs.Vector3d force = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->force_);
  }

  return total_size;
}
int Wind::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:physics_msgs.msgs.Wind)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string frame_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->frame_id());

    // required int64 time_usec = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_usec());

    // required .gazebo.msgs.Vector3d force = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->force_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Wind::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:physics_msgs.msgs.Wind)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Wind* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Wind>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:physics_msgs.msgs.Wind)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:physics_msgs.msgs.Wind)
    MergeFrom(*source);
  }
}

void Wind::MergeFrom(const Wind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:physics_msgs.msgs.Wind)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frame_id()) {
      set_has_frame_id();
      frame_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_id_);
    }
    if (from.has_time_usec()) {
      set_time_usec(from.time_usec());
    }
    if (from.has_force()) {
      mutable_force()->::gazebo::msgs::Vector3d::MergeFrom(from.force());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Wind::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:physics_msgs.msgs.Wind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wind::CopyFrom(const Wind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:physics_msgs.msgs.Wind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wind::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_force()) {
    if (!this->force_->IsInitialized()) return false;
  }
  return true;
}

void Wind::Swap(Wind* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Wind::InternalSwap(Wind* other) {
  frame_id_.Swap(&other->frame_id_);
  std::swap(time_usec_, other->time_usec_);
  std::swap(force_, other->force_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Wind::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Wind_descriptor_;
  metadata.reflection = Wind_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Wind

// required string frame_id = 1;
bool Wind::has_frame_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Wind::set_has_frame_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Wind::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Wind::clear_frame_id() {
  frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_frame_id();
}
 const ::std::string& Wind::frame_id() const {
  // @@protoc_insertion_point(field_get:physics_msgs.msgs.Wind.frame_id)
  return frame_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Wind::set_frame_id(const ::std::string& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:physics_msgs.msgs.Wind.frame_id)
}
 void Wind::set_frame_id(const char* value) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:physics_msgs.msgs.Wind.frame_id)
}
 void Wind::set_frame_id(const char* value, size_t size) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:physics_msgs.msgs.Wind.frame_id)
}
 ::std::string* Wind::mutable_frame_id() {
  set_has_frame_id();
  // @@protoc_insertion_point(field_mutable:physics_msgs.msgs.Wind.frame_id)
  return frame_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Wind::release_frame_id() {
  // @@protoc_insertion_point(field_release:physics_msgs.msgs.Wind.frame_id)
  clear_has_frame_id();
  return frame_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Wind::set_allocated_frame_id(::std::string* frame_id) {
  if (frame_id != NULL) {
    set_has_frame_id();
  } else {
    clear_has_frame_id();
  }
  frame_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_id);
  // @@protoc_insertion_point(field_set_allocated:physics_msgs.msgs.Wind.frame_id)
}

// required int64 time_usec = 2;
bool Wind::has_time_usec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Wind::set_has_time_usec() {
  _has_bits_[0] |= 0x00000002u;
}
void Wind::clear_has_time_usec() {
  _has_bits_[0] &= ~0x00000002u;
}
void Wind::clear_time_usec() {
  time_usec_ = GOOGLE_LONGLONG(0);
  clear_has_time_usec();
}
 ::google::protobuf::int64 Wind::time_usec() const {
  // @@protoc_insertion_point(field_get:physics_msgs.msgs.Wind.time_usec)
  return time_usec_;
}
 void Wind::set_time_usec(::google::protobuf::int64 value) {
  set_has_time_usec();
  time_usec_ = value;
  // @@protoc_insertion_point(field_set:physics_msgs.msgs.Wind.time_usec)
}

// required .gazebo.msgs.Vector3d force = 3;
bool Wind::has_force() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Wind::set_has_force() {
  _has_bits_[0] |= 0x00000004u;
}
void Wind::clear_has_force() {
  _has_bits_[0] &= ~0x00000004u;
}
void Wind::clear_force() {
  if (force_ != NULL) force_->::gazebo::msgs::Vector3d::Clear();
  clear_has_force();
}
const ::gazebo::msgs::Vector3d& Wind::force() const {
  // @@protoc_insertion_point(field_get:physics_msgs.msgs.Wind.force)
  return force_ != NULL ? *force_ : *default_instance_->force_;
}
::gazebo::msgs::Vector3d* Wind::mutable_force() {
  set_has_force();
  if (force_ == NULL) {
    force_ = new ::gazebo::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:physics_msgs.msgs.Wind.force)
  return force_;
}
::gazebo::msgs::Vector3d* Wind::release_force() {
  // @@protoc_insertion_point(field_release:physics_msgs.msgs.Wind.force)
  clear_has_force();
  ::gazebo::msgs::Vector3d* temp = force_;
  force_ = NULL;
  return temp;
}
void Wind::set_allocated_force(::gazebo::msgs::Vector3d* force) {
  delete force_;
  force_ = force;
  if (force) {
    set_has_force();
  } else {
    clear_has_force();
  }
  // @@protoc_insertion_point(field_set_allocated:physics_msgs.msgs.Wind.force)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace physics_msgs

// @@protoc_insertion_point(global_scope)
