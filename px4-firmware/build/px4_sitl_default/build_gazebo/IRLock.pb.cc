// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IRLock.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IRLock.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sensor_msgs {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* IRLock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IRLock_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_IRLock_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_IRLock_2eproto() {
  protobuf_AddDesc_IRLock_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "IRLock.proto");
  GOOGLE_CHECK(file != NULL);
  IRLock_descriptor_ = file->message_type(0);
  static const int IRLock_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IRLock, time_usec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IRLock, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IRLock, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IRLock, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IRLock, size_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IRLock, size_y_),
  };
  IRLock_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IRLock_descriptor_,
      IRLock::default_instance_,
      IRLock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IRLock, _has_bits_[0]),
      -1,
      -1,
      sizeof(IRLock),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IRLock, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_IRLock_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IRLock_descriptor_, &IRLock::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_IRLock_2eproto() {
  delete IRLock::default_instance_;
  delete IRLock_reflection_;
}

void protobuf_AddDesc_IRLock_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_IRLock_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014IRLock.proto\022\020sensor_msgs.msgs\"l\n\006IRLo"
    "ck\022\021\n\ttime_usec\030\001 \002(\003\022\021\n\tsignature\030\002 \002(\005"
    "\022\r\n\005pos_x\030\003 \002(\002\022\r\n\005pos_y\030\004 \002(\002\022\016\n\006size_x"
    "\030\005 \002(\002\022\016\n\006size_y\030\006 \002(\002", 142);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "IRLock.proto", &protobuf_RegisterTypes);
  IRLock::default_instance_ = new IRLock();
  IRLock::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IRLock_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IRLock_2eproto {
  StaticDescriptorInitializer_IRLock_2eproto() {
    protobuf_AddDesc_IRLock_2eproto();
  }
} static_descriptor_initializer_IRLock_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IRLock::kTimeUsecFieldNumber;
const int IRLock::kSignatureFieldNumber;
const int IRLock::kPosXFieldNumber;
const int IRLock::kPosYFieldNumber;
const int IRLock::kSizeXFieldNumber;
const int IRLock::kSizeYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IRLock::IRLock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensor_msgs.msgs.IRLock)
}

void IRLock::InitAsDefaultInstance() {
}

IRLock::IRLock(const IRLock& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sensor_msgs.msgs.IRLock)
}

void IRLock::SharedCtor() {
  _cached_size_ = 0;
  time_usec_ = GOOGLE_LONGLONG(0);
  signature_ = 0;
  pos_x_ = 0;
  pos_y_ = 0;
  size_x_ = 0;
  size_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IRLock::~IRLock() {
  // @@protoc_insertion_point(destructor:sensor_msgs.msgs.IRLock)
  SharedDtor();
}

void IRLock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IRLock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IRLock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IRLock_descriptor_;
}

const IRLock& IRLock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IRLock_2eproto();
  return *default_instance_;
}

IRLock* IRLock::default_instance_ = NULL;

IRLock* IRLock::New(::google::protobuf::Arena* arena) const {
  IRLock* n = new IRLock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IRLock::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_msgs.msgs.IRLock)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IRLock, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IRLock*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(time_usec_, size_y_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool IRLock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensor_msgs.msgs.IRLock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time_usec = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_usec_)));
          set_has_time_usec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_signature;
        break;
      }

      // required int32 signature = 2;
      case 2: {
        if (tag == 16) {
         parse_signature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signature_)));
          set_has_signature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_pos_x;
        break;
      }

      // required float pos_x = 3;
      case 3: {
        if (tag == 29) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_pos_y;
        break;
      }

      // required float pos_y = 4;
      case 4: {
        if (tag == 37) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_size_x;
        break;
      }

      // required float size_x = 5;
      case 5: {
        if (tag == 45) {
         parse_size_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &size_x_)));
          set_has_size_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_size_y;
        break;
      }

      // required float size_y = 6;
      case 6: {
        if (tag == 53) {
         parse_size_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &size_y_)));
          set_has_size_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensor_msgs.msgs.IRLock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensor_msgs.msgs.IRLock)
  return false;
#undef DO_
}

void IRLock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensor_msgs.msgs.IRLock)
  // required int64 time_usec = 1;
  if (has_time_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time_usec(), output);
  }

  // required int32 signature = 2;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->signature(), output);
  }

  // required float pos_x = 3;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pos_x(), output);
  }

  // required float pos_y = 4;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pos_y(), output);
  }

  // required float size_x = 5;
  if (has_size_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->size_x(), output);
  }

  // required float size_y = 6;
  if (has_size_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->size_y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sensor_msgs.msgs.IRLock)
}

::google::protobuf::uint8* IRLock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensor_msgs.msgs.IRLock)
  // required int64 time_usec = 1;
  if (has_time_usec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time_usec(), target);
  }

  // required int32 signature = 2;
  if (has_signature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->signature(), target);
  }

  // required float pos_x = 3;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pos_x(), target);
  }

  // required float pos_y = 4;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pos_y(), target);
  }

  // required float size_x = 5;
  if (has_size_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->size_x(), target);
  }

  // required float size_y = 6;
  if (has_size_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->size_y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_msgs.msgs.IRLock)
  return target;
}

int IRLock::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sensor_msgs.msgs.IRLock)
  int total_size = 0;

  if (has_time_usec()) {
    // required int64 time_usec = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_usec());
  }

  if (has_signature()) {
    // required int32 signature = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->signature());
  }

  if (has_pos_x()) {
    // required float pos_x = 3;
    total_size += 1 + 4;
  }

  if (has_pos_y()) {
    // required float pos_y = 4;
    total_size += 1 + 4;
  }

  if (has_size_x()) {
    // required float size_x = 5;
    total_size += 1 + 4;
  }

  if (has_size_y()) {
    // required float size_y = 6;
    total_size += 1 + 4;
  }

  return total_size;
}
int IRLock::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sensor_msgs.msgs.IRLock)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required int64 time_usec = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_usec());

    // required int32 signature = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->signature());

    // required float pos_x = 3;
    total_size += 1 + 4;

    // required float pos_y = 4;
    total_size += 1 + 4;

    // required float size_x = 5;
    total_size += 1 + 4;

    // required float size_y = 6;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IRLock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensor_msgs.msgs.IRLock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IRLock* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IRLock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensor_msgs.msgs.IRLock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensor_msgs.msgs.IRLock)
    MergeFrom(*source);
  }
}

void IRLock::MergeFrom(const IRLock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensor_msgs.msgs.IRLock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_usec()) {
      set_time_usec(from.time_usec());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
    if (from.has_size_x()) {
      set_size_x(from.size_x());
    }
    if (from.has_size_y()) {
      set_size_y(from.size_y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void IRLock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensor_msgs.msgs.IRLock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IRLock::CopyFrom(const IRLock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_msgs.msgs.IRLock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRLock::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void IRLock::Swap(IRLock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IRLock::InternalSwap(IRLock* other) {
  std::swap(time_usec_, other->time_usec_);
  std::swap(signature_, other->signature_);
  std::swap(pos_x_, other->pos_x_);
  std::swap(pos_y_, other->pos_y_);
  std::swap(size_x_, other->size_x_);
  std::swap(size_y_, other->size_y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IRLock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IRLock_descriptor_;
  metadata.reflection = IRLock_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IRLock

// required int64 time_usec = 1;
bool IRLock::has_time_usec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IRLock::set_has_time_usec() {
  _has_bits_[0] |= 0x00000001u;
}
void IRLock::clear_has_time_usec() {
  _has_bits_[0] &= ~0x00000001u;
}
void IRLock::clear_time_usec() {
  time_usec_ = GOOGLE_LONGLONG(0);
  clear_has_time_usec();
}
 ::google::protobuf::int64 IRLock::time_usec() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.IRLock.time_usec)
  return time_usec_;
}
 void IRLock::set_time_usec(::google::protobuf::int64 value) {
  set_has_time_usec();
  time_usec_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.IRLock.time_usec)
}

// required int32 signature = 2;
bool IRLock::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IRLock::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
void IRLock::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
void IRLock::clear_signature() {
  signature_ = 0;
  clear_has_signature();
}
 ::google::protobuf::int32 IRLock::signature() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.IRLock.signature)
  return signature_;
}
 void IRLock::set_signature(::google::protobuf::int32 value) {
  set_has_signature();
  signature_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.IRLock.signature)
}

// required float pos_x = 3;
bool IRLock::has_pos_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IRLock::set_has_pos_x() {
  _has_bits_[0] |= 0x00000004u;
}
void IRLock::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000004u;
}
void IRLock::clear_pos_x() {
  pos_x_ = 0;
  clear_has_pos_x();
}
 float IRLock::pos_x() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.IRLock.pos_x)
  return pos_x_;
}
 void IRLock::set_pos_x(float value) {
  set_has_pos_x();
  pos_x_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.IRLock.pos_x)
}

// required float pos_y = 4;
bool IRLock::has_pos_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IRLock::set_has_pos_y() {
  _has_bits_[0] |= 0x00000008u;
}
void IRLock::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000008u;
}
void IRLock::clear_pos_y() {
  pos_y_ = 0;
  clear_has_pos_y();
}
 float IRLock::pos_y() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.IRLock.pos_y)
  return pos_y_;
}
 void IRLock::set_pos_y(float value) {
  set_has_pos_y();
  pos_y_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.IRLock.pos_y)
}

// required float size_x = 5;
bool IRLock::has_size_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void IRLock::set_has_size_x() {
  _has_bits_[0] |= 0x00000010u;
}
void IRLock::clear_has_size_x() {
  _has_bits_[0] &= ~0x00000010u;
}
void IRLock::clear_size_x() {
  size_x_ = 0;
  clear_has_size_x();
}
 float IRLock::size_x() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.IRLock.size_x)
  return size_x_;
}
 void IRLock::set_size_x(float value) {
  set_has_size_x();
  size_x_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.IRLock.size_x)
}

// required float size_y = 6;
bool IRLock::has_size_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void IRLock::set_has_size_y() {
  _has_bits_[0] |= 0x00000020u;
}
void IRLock::clear_has_size_y() {
  _has_bits_[0] &= ~0x00000020u;
}
void IRLock::clear_size_y() {
  size_y_ = 0;
  clear_has_size_y();
}
 float IRLock::size_y() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.IRLock.size_y)
  return size_y_;
}
 void IRLock::set_size_y(float value) {
  set_has_size_y();
  size_y_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.IRLock.size_y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace sensor_msgs

// @@protoc_insertion_point(global_scope)
