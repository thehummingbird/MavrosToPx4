// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OpticalFlow.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "OpticalFlow.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sensor_msgs {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* OpticalFlow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpticalFlow_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_OpticalFlow_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_OpticalFlow_2eproto() {
  protobuf_AddDesc_OpticalFlow_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "OpticalFlow.proto");
  GOOGLE_CHECK(file != NULL);
  OpticalFlow_descriptor_ = file->message_type(0);
  static const int OpticalFlow_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticalFlow, time_usec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticalFlow, sensor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticalFlow, integration_time_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticalFlow, integrated_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticalFlow, integrated_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticalFlow, integrated_xgyro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticalFlow, integrated_ygyro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticalFlow, integrated_zgyro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticalFlow, temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticalFlow, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticalFlow, time_delta_distance_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticalFlow, distance_),
  };
  OpticalFlow_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OpticalFlow_descriptor_,
      OpticalFlow::default_instance_,
      OpticalFlow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticalFlow, _has_bits_[0]),
      -1,
      -1,
      sizeof(OpticalFlow),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticalFlow, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_OpticalFlow_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OpticalFlow_descriptor_, &OpticalFlow::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_OpticalFlow_2eproto() {
  delete OpticalFlow::default_instance_;
  delete OpticalFlow_reflection_;
}

void protobuf_AddDesc_OpticalFlow_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_OpticalFlow_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021OpticalFlow.proto\022\020sensor_msgs.msgs\"\242\002"
    "\n\013OpticalFlow\022\021\n\ttime_usec\030\001 \002(\003\022\021\n\tsens"
    "or_id\030\002 \002(\005\022\033\n\023integration_time_us\030\003 \002(\005"
    "\022\024\n\014integrated_x\030\004 \002(\002\022\024\n\014integrated_y\030\005"
    " \002(\002\022\030\n\020integrated_xgyro\030\006 \002(\002\022\030\n\020integr"
    "ated_ygyro\030\007 \002(\002\022\030\n\020integrated_zgyro\030\010 \002"
    "(\002\022\023\n\013temperature\030\t \002(\002\022\017\n\007quality\030\n \002(\005"
    "\022\036\n\026time_delta_distance_us\030\013 \002(\005\022\020\n\010dist"
    "ance\030\014 \002(\002", 330);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "OpticalFlow.proto", &protobuf_RegisterTypes);
  OpticalFlow::default_instance_ = new OpticalFlow();
  OpticalFlow::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_OpticalFlow_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_OpticalFlow_2eproto {
  StaticDescriptorInitializer_OpticalFlow_2eproto() {
    protobuf_AddDesc_OpticalFlow_2eproto();
  }
} static_descriptor_initializer_OpticalFlow_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpticalFlow::kTimeUsecFieldNumber;
const int OpticalFlow::kSensorIdFieldNumber;
const int OpticalFlow::kIntegrationTimeUsFieldNumber;
const int OpticalFlow::kIntegratedXFieldNumber;
const int OpticalFlow::kIntegratedYFieldNumber;
const int OpticalFlow::kIntegratedXgyroFieldNumber;
const int OpticalFlow::kIntegratedYgyroFieldNumber;
const int OpticalFlow::kIntegratedZgyroFieldNumber;
const int OpticalFlow::kTemperatureFieldNumber;
const int OpticalFlow::kQualityFieldNumber;
const int OpticalFlow::kTimeDeltaDistanceUsFieldNumber;
const int OpticalFlow::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpticalFlow::OpticalFlow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensor_msgs.msgs.OpticalFlow)
}

void OpticalFlow::InitAsDefaultInstance() {
}

OpticalFlow::OpticalFlow(const OpticalFlow& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sensor_msgs.msgs.OpticalFlow)
}

void OpticalFlow::SharedCtor() {
  _cached_size_ = 0;
  time_usec_ = GOOGLE_LONGLONG(0);
  sensor_id_ = 0;
  integration_time_us_ = 0;
  integrated_x_ = 0;
  integrated_y_ = 0;
  integrated_xgyro_ = 0;
  integrated_ygyro_ = 0;
  integrated_zgyro_ = 0;
  temperature_ = 0;
  quality_ = 0;
  time_delta_distance_us_ = 0;
  distance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpticalFlow::~OpticalFlow() {
  // @@protoc_insertion_point(destructor:sensor_msgs.msgs.OpticalFlow)
  SharedDtor();
}

void OpticalFlow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpticalFlow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpticalFlow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpticalFlow_descriptor_;
}

const OpticalFlow& OpticalFlow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OpticalFlow_2eproto();
  return *default_instance_;
}

OpticalFlow* OpticalFlow::default_instance_ = NULL;

OpticalFlow* OpticalFlow::New(::google::protobuf::Arena* arena) const {
  OpticalFlow* n = new OpticalFlow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpticalFlow::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_msgs.msgs.OpticalFlow)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(OpticalFlow, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OpticalFlow*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(time_usec_, integrated_zgyro_);
  }
  ZR_(temperature_, distance_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OpticalFlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensor_msgs.msgs.OpticalFlow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time_usec = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_usec_)));
          set_has_time_usec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sensor_id;
        break;
      }

      // required int32 sensor_id = 2;
      case 2: {
        if (tag == 16) {
         parse_sensor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sensor_id_)));
          set_has_sensor_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_integration_time_us;
        break;
      }

      // required int32 integration_time_us = 3;
      case 3: {
        if (tag == 24) {
         parse_integration_time_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integration_time_us_)));
          set_has_integration_time_us();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_integrated_x;
        break;
      }

      // required float integrated_x = 4;
      case 4: {
        if (tag == 37) {
         parse_integrated_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &integrated_x_)));
          set_has_integrated_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_integrated_y;
        break;
      }

      // required float integrated_y = 5;
      case 5: {
        if (tag == 45) {
         parse_integrated_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &integrated_y_)));
          set_has_integrated_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_integrated_xgyro;
        break;
      }

      // required float integrated_xgyro = 6;
      case 6: {
        if (tag == 53) {
         parse_integrated_xgyro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &integrated_xgyro_)));
          set_has_integrated_xgyro();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_integrated_ygyro;
        break;
      }

      // required float integrated_ygyro = 7;
      case 7: {
        if (tag == 61) {
         parse_integrated_ygyro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &integrated_ygyro_)));
          set_has_integrated_ygyro();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_integrated_zgyro;
        break;
      }

      // required float integrated_zgyro = 8;
      case 8: {
        if (tag == 69) {
         parse_integrated_zgyro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &integrated_zgyro_)));
          set_has_integrated_zgyro();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_temperature;
        break;
      }

      // required float temperature = 9;
      case 9: {
        if (tag == 77) {
         parse_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &temperature_)));
          set_has_temperature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_quality;
        break;
      }

      // required int32 quality = 10;
      case 10: {
        if (tag == 80) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_time_delta_distance_us;
        break;
      }

      // required int32 time_delta_distance_us = 11;
      case 11: {
        if (tag == 88) {
         parse_time_delta_distance_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_delta_distance_us_)));
          set_has_time_delta_distance_us();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_distance;
        break;
      }

      // required float distance = 12;
      case 12: {
        if (tag == 101) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensor_msgs.msgs.OpticalFlow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensor_msgs.msgs.OpticalFlow)
  return false;
#undef DO_
}

void OpticalFlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensor_msgs.msgs.OpticalFlow)
  // required int64 time_usec = 1;
  if (has_time_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time_usec(), output);
  }

  // required int32 sensor_id = 2;
  if (has_sensor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sensor_id(), output);
  }

  // required int32 integration_time_us = 3;
  if (has_integration_time_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->integration_time_us(), output);
  }

  // required float integrated_x = 4;
  if (has_integrated_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->integrated_x(), output);
  }

  // required float integrated_y = 5;
  if (has_integrated_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->integrated_y(), output);
  }

  // required float integrated_xgyro = 6;
  if (has_integrated_xgyro()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->integrated_xgyro(), output);
  }

  // required float integrated_ygyro = 7;
  if (has_integrated_ygyro()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->integrated_ygyro(), output);
  }

  // required float integrated_zgyro = 8;
  if (has_integrated_zgyro()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->integrated_zgyro(), output);
  }

  // required float temperature = 9;
  if (has_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->temperature(), output);
  }

  // required int32 quality = 10;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->quality(), output);
  }

  // required int32 time_delta_distance_us = 11;
  if (has_time_delta_distance_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->time_delta_distance_us(), output);
  }

  // required float distance = 12;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sensor_msgs.msgs.OpticalFlow)
}

::google::protobuf::uint8* OpticalFlow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensor_msgs.msgs.OpticalFlow)
  // required int64 time_usec = 1;
  if (has_time_usec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time_usec(), target);
  }

  // required int32 sensor_id = 2;
  if (has_sensor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sensor_id(), target);
  }

  // required int32 integration_time_us = 3;
  if (has_integration_time_us()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->integration_time_us(), target);
  }

  // required float integrated_x = 4;
  if (has_integrated_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->integrated_x(), target);
  }

  // required float integrated_y = 5;
  if (has_integrated_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->integrated_y(), target);
  }

  // required float integrated_xgyro = 6;
  if (has_integrated_xgyro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->integrated_xgyro(), target);
  }

  // required float integrated_ygyro = 7;
  if (has_integrated_ygyro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->integrated_ygyro(), target);
  }

  // required float integrated_zgyro = 8;
  if (has_integrated_zgyro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->integrated_zgyro(), target);
  }

  // required float temperature = 9;
  if (has_temperature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->temperature(), target);
  }

  // required int32 quality = 10;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->quality(), target);
  }

  // required int32 time_delta_distance_us = 11;
  if (has_time_delta_distance_us()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->time_delta_distance_us(), target);
  }

  // required float distance = 12;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_msgs.msgs.OpticalFlow)
  return target;
}

int OpticalFlow::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sensor_msgs.msgs.OpticalFlow)
  int total_size = 0;

  if (has_time_usec()) {
    // required int64 time_usec = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_usec());
  }

  if (has_sensor_id()) {
    // required int32 sensor_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sensor_id());
  }

  if (has_integration_time_us()) {
    // required int32 integration_time_us = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->integration_time_us());
  }

  if (has_integrated_x()) {
    // required float integrated_x = 4;
    total_size += 1 + 4;
  }

  if (has_integrated_y()) {
    // required float integrated_y = 5;
    total_size += 1 + 4;
  }

  if (has_integrated_xgyro()) {
    // required float integrated_xgyro = 6;
    total_size += 1 + 4;
  }

  if (has_integrated_ygyro()) {
    // required float integrated_ygyro = 7;
    total_size += 1 + 4;
  }

  if (has_integrated_zgyro()) {
    // required float integrated_zgyro = 8;
    total_size += 1 + 4;
  }

  if (has_temperature()) {
    // required float temperature = 9;
    total_size += 1 + 4;
  }

  if (has_quality()) {
    // required int32 quality = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quality());
  }

  if (has_time_delta_distance_us()) {
    // required int32 time_delta_distance_us = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time_delta_distance_us());
  }

  if (has_distance()) {
    // required float distance = 12;
    total_size += 1 + 4;
  }

  return total_size;
}
int OpticalFlow::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sensor_msgs.msgs.OpticalFlow)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000fff) ^ 0x00000fff) == 0) {  // All required fields are present.
    // required int64 time_usec = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_usec());

    // required int32 sensor_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sensor_id());

    // required int32 integration_time_us = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->integration_time_us());

    // required float integrated_x = 4;
    total_size += 1 + 4;

    // required float integrated_y = 5;
    total_size += 1 + 4;

    // required float integrated_xgyro = 6;
    total_size += 1 + 4;

    // required float integrated_ygyro = 7;
    total_size += 1 + 4;

    // required float integrated_zgyro = 8;
    total_size += 1 + 4;

    // required float temperature = 9;
    total_size += 1 + 4;

    // required int32 quality = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quality());

    // required int32 time_delta_distance_us = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time_delta_distance_us());

    // required float distance = 12;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpticalFlow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensor_msgs.msgs.OpticalFlow)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OpticalFlow* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OpticalFlow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensor_msgs.msgs.OpticalFlow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensor_msgs.msgs.OpticalFlow)
    MergeFrom(*source);
  }
}

void OpticalFlow::MergeFrom(const OpticalFlow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensor_msgs.msgs.OpticalFlow)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_usec()) {
      set_time_usec(from.time_usec());
    }
    if (from.has_sensor_id()) {
      set_sensor_id(from.sensor_id());
    }
    if (from.has_integration_time_us()) {
      set_integration_time_us(from.integration_time_us());
    }
    if (from.has_integrated_x()) {
      set_integrated_x(from.integrated_x());
    }
    if (from.has_integrated_y()) {
      set_integrated_y(from.integrated_y());
    }
    if (from.has_integrated_xgyro()) {
      set_integrated_xgyro(from.integrated_xgyro());
    }
    if (from.has_integrated_ygyro()) {
      set_integrated_ygyro(from.integrated_ygyro());
    }
    if (from.has_integrated_zgyro()) {
      set_integrated_zgyro(from.integrated_zgyro());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_temperature()) {
      set_temperature(from.temperature());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_time_delta_distance_us()) {
      set_time_delta_distance_us(from.time_delta_distance_us());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OpticalFlow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensor_msgs.msgs.OpticalFlow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpticalFlow::CopyFrom(const OpticalFlow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_msgs.msgs.OpticalFlow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpticalFlow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void OpticalFlow::Swap(OpticalFlow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpticalFlow::InternalSwap(OpticalFlow* other) {
  std::swap(time_usec_, other->time_usec_);
  std::swap(sensor_id_, other->sensor_id_);
  std::swap(integration_time_us_, other->integration_time_us_);
  std::swap(integrated_x_, other->integrated_x_);
  std::swap(integrated_y_, other->integrated_y_);
  std::swap(integrated_xgyro_, other->integrated_xgyro_);
  std::swap(integrated_ygyro_, other->integrated_ygyro_);
  std::swap(integrated_zgyro_, other->integrated_zgyro_);
  std::swap(temperature_, other->temperature_);
  std::swap(quality_, other->quality_);
  std::swap(time_delta_distance_us_, other->time_delta_distance_us_);
  std::swap(distance_, other->distance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpticalFlow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpticalFlow_descriptor_;
  metadata.reflection = OpticalFlow_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpticalFlow

// required int64 time_usec = 1;
bool OpticalFlow::has_time_usec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OpticalFlow::set_has_time_usec() {
  _has_bits_[0] |= 0x00000001u;
}
void OpticalFlow::clear_has_time_usec() {
  _has_bits_[0] &= ~0x00000001u;
}
void OpticalFlow::clear_time_usec() {
  time_usec_ = GOOGLE_LONGLONG(0);
  clear_has_time_usec();
}
 ::google::protobuf::int64 OpticalFlow::time_usec() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.OpticalFlow.time_usec)
  return time_usec_;
}
 void OpticalFlow::set_time_usec(::google::protobuf::int64 value) {
  set_has_time_usec();
  time_usec_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.OpticalFlow.time_usec)
}

// required int32 sensor_id = 2;
bool OpticalFlow::has_sensor_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OpticalFlow::set_has_sensor_id() {
  _has_bits_[0] |= 0x00000002u;
}
void OpticalFlow::clear_has_sensor_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void OpticalFlow::clear_sensor_id() {
  sensor_id_ = 0;
  clear_has_sensor_id();
}
 ::google::protobuf::int32 OpticalFlow::sensor_id() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.OpticalFlow.sensor_id)
  return sensor_id_;
}
 void OpticalFlow::set_sensor_id(::google::protobuf::int32 value) {
  set_has_sensor_id();
  sensor_id_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.OpticalFlow.sensor_id)
}

// required int32 integration_time_us = 3;
bool OpticalFlow::has_integration_time_us() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OpticalFlow::set_has_integration_time_us() {
  _has_bits_[0] |= 0x00000004u;
}
void OpticalFlow::clear_has_integration_time_us() {
  _has_bits_[0] &= ~0x00000004u;
}
void OpticalFlow::clear_integration_time_us() {
  integration_time_us_ = 0;
  clear_has_integration_time_us();
}
 ::google::protobuf::int32 OpticalFlow::integration_time_us() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.OpticalFlow.integration_time_us)
  return integration_time_us_;
}
 void OpticalFlow::set_integration_time_us(::google::protobuf::int32 value) {
  set_has_integration_time_us();
  integration_time_us_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.OpticalFlow.integration_time_us)
}

// required float integrated_x = 4;
bool OpticalFlow::has_integrated_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OpticalFlow::set_has_integrated_x() {
  _has_bits_[0] |= 0x00000008u;
}
void OpticalFlow::clear_has_integrated_x() {
  _has_bits_[0] &= ~0x00000008u;
}
void OpticalFlow::clear_integrated_x() {
  integrated_x_ = 0;
  clear_has_integrated_x();
}
 float OpticalFlow::integrated_x() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.OpticalFlow.integrated_x)
  return integrated_x_;
}
 void OpticalFlow::set_integrated_x(float value) {
  set_has_integrated_x();
  integrated_x_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.OpticalFlow.integrated_x)
}

// required float integrated_y = 5;
bool OpticalFlow::has_integrated_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OpticalFlow::set_has_integrated_y() {
  _has_bits_[0] |= 0x00000010u;
}
void OpticalFlow::clear_has_integrated_y() {
  _has_bits_[0] &= ~0x00000010u;
}
void OpticalFlow::clear_integrated_y() {
  integrated_y_ = 0;
  clear_has_integrated_y();
}
 float OpticalFlow::integrated_y() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.OpticalFlow.integrated_y)
  return integrated_y_;
}
 void OpticalFlow::set_integrated_y(float value) {
  set_has_integrated_y();
  integrated_y_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.OpticalFlow.integrated_y)
}

// required float integrated_xgyro = 6;
bool OpticalFlow::has_integrated_xgyro() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OpticalFlow::set_has_integrated_xgyro() {
  _has_bits_[0] |= 0x00000020u;
}
void OpticalFlow::clear_has_integrated_xgyro() {
  _has_bits_[0] &= ~0x00000020u;
}
void OpticalFlow::clear_integrated_xgyro() {
  integrated_xgyro_ = 0;
  clear_has_integrated_xgyro();
}
 float OpticalFlow::integrated_xgyro() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.OpticalFlow.integrated_xgyro)
  return integrated_xgyro_;
}
 void OpticalFlow::set_integrated_xgyro(float value) {
  set_has_integrated_xgyro();
  integrated_xgyro_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.OpticalFlow.integrated_xgyro)
}

// required float integrated_ygyro = 7;
bool OpticalFlow::has_integrated_ygyro() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void OpticalFlow::set_has_integrated_ygyro() {
  _has_bits_[0] |= 0x00000040u;
}
void OpticalFlow::clear_has_integrated_ygyro() {
  _has_bits_[0] &= ~0x00000040u;
}
void OpticalFlow::clear_integrated_ygyro() {
  integrated_ygyro_ = 0;
  clear_has_integrated_ygyro();
}
 float OpticalFlow::integrated_ygyro() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.OpticalFlow.integrated_ygyro)
  return integrated_ygyro_;
}
 void OpticalFlow::set_integrated_ygyro(float value) {
  set_has_integrated_ygyro();
  integrated_ygyro_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.OpticalFlow.integrated_ygyro)
}

// required float integrated_zgyro = 8;
bool OpticalFlow::has_integrated_zgyro() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void OpticalFlow::set_has_integrated_zgyro() {
  _has_bits_[0] |= 0x00000080u;
}
void OpticalFlow::clear_has_integrated_zgyro() {
  _has_bits_[0] &= ~0x00000080u;
}
void OpticalFlow::clear_integrated_zgyro() {
  integrated_zgyro_ = 0;
  clear_has_integrated_zgyro();
}
 float OpticalFlow::integrated_zgyro() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.OpticalFlow.integrated_zgyro)
  return integrated_zgyro_;
}
 void OpticalFlow::set_integrated_zgyro(float value) {
  set_has_integrated_zgyro();
  integrated_zgyro_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.OpticalFlow.integrated_zgyro)
}

// required float temperature = 9;
bool OpticalFlow::has_temperature() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void OpticalFlow::set_has_temperature() {
  _has_bits_[0] |= 0x00000100u;
}
void OpticalFlow::clear_has_temperature() {
  _has_bits_[0] &= ~0x00000100u;
}
void OpticalFlow::clear_temperature() {
  temperature_ = 0;
  clear_has_temperature();
}
 float OpticalFlow::temperature() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.OpticalFlow.temperature)
  return temperature_;
}
 void OpticalFlow::set_temperature(float value) {
  set_has_temperature();
  temperature_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.OpticalFlow.temperature)
}

// required int32 quality = 10;
bool OpticalFlow::has_quality() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void OpticalFlow::set_has_quality() {
  _has_bits_[0] |= 0x00000200u;
}
void OpticalFlow::clear_has_quality() {
  _has_bits_[0] &= ~0x00000200u;
}
void OpticalFlow::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
 ::google::protobuf::int32 OpticalFlow::quality() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.OpticalFlow.quality)
  return quality_;
}
 void OpticalFlow::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.OpticalFlow.quality)
}

// required int32 time_delta_distance_us = 11;
bool OpticalFlow::has_time_delta_distance_us() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void OpticalFlow::set_has_time_delta_distance_us() {
  _has_bits_[0] |= 0x00000400u;
}
void OpticalFlow::clear_has_time_delta_distance_us() {
  _has_bits_[0] &= ~0x00000400u;
}
void OpticalFlow::clear_time_delta_distance_us() {
  time_delta_distance_us_ = 0;
  clear_has_time_delta_distance_us();
}
 ::google::protobuf::int32 OpticalFlow::time_delta_distance_us() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.OpticalFlow.time_delta_distance_us)
  return time_delta_distance_us_;
}
 void OpticalFlow::set_time_delta_distance_us(::google::protobuf::int32 value) {
  set_has_time_delta_distance_us();
  time_delta_distance_us_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.OpticalFlow.time_delta_distance_us)
}

// required float distance = 12;
bool OpticalFlow::has_distance() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void OpticalFlow::set_has_distance() {
  _has_bits_[0] |= 0x00000800u;
}
void OpticalFlow::clear_has_distance() {
  _has_bits_[0] &= ~0x00000800u;
}
void OpticalFlow::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
 float OpticalFlow::distance() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.OpticalFlow.distance)
  return distance_;
}
 void OpticalFlow::set_distance(float value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.OpticalFlow.distance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace sensor_msgs

// @@protoc_insertion_point(global_scope)
