// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IRLock.proto

#ifndef PROTOBUF_IRLock_2eproto__INCLUDED
#define PROTOBUF_IRLock_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace sensor_msgs {
namespace msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_IRLock_2eproto();
void protobuf_AssignDesc_IRLock_2eproto();
void protobuf_ShutdownFile_IRLock_2eproto();

class IRLock;

// ===================================================================

class IRLock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensor_msgs.msgs.IRLock) */ {
 public:
  IRLock();
  virtual ~IRLock();

  IRLock(const IRLock& from);

  inline IRLock& operator=(const IRLock& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IRLock& default_instance();

  void Swap(IRLock* other);

  // implements Message ----------------------------------------------

  inline IRLock* New() const { return New(NULL); }

  IRLock* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IRLock& from);
  void MergeFrom(const IRLock& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IRLock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 time_usec = 1;
  bool has_time_usec() const;
  void clear_time_usec();
  static const int kTimeUsecFieldNumber = 1;
  ::google::protobuf::int64 time_usec() const;
  void set_time_usec(::google::protobuf::int64 value);

  // required int32 signature = 2;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 2;
  ::google::protobuf::int32 signature() const;
  void set_signature(::google::protobuf::int32 value);

  // required float pos_x = 3;
  bool has_pos_x() const;
  void clear_pos_x();
  static const int kPosXFieldNumber = 3;
  float pos_x() const;
  void set_pos_x(float value);

  // required float pos_y = 4;
  bool has_pos_y() const;
  void clear_pos_y();
  static const int kPosYFieldNumber = 4;
  float pos_y() const;
  void set_pos_y(float value);

  // required float size_x = 5;
  bool has_size_x() const;
  void clear_size_x();
  static const int kSizeXFieldNumber = 5;
  float size_x() const;
  void set_size_x(float value);

  // required float size_y = 6;
  bool has_size_y() const;
  void clear_size_y();
  static const int kSizeYFieldNumber = 6;
  float size_y() const;
  void set_size_y(float value);

  // @@protoc_insertion_point(class_scope:sensor_msgs.msgs.IRLock)
 private:
  inline void set_has_time_usec();
  inline void clear_has_time_usec();
  inline void set_has_signature();
  inline void clear_has_signature();
  inline void set_has_pos_x();
  inline void clear_has_pos_x();
  inline void set_has_pos_y();
  inline void clear_has_pos_y();
  inline void set_has_size_x();
  inline void clear_has_size_x();
  inline void set_has_size_y();
  inline void clear_has_size_y();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 time_usec_;
  ::google::protobuf::int32 signature_;
  float pos_x_;
  float pos_y_;
  float size_x_;
  float size_y_;
  friend void  protobuf_AddDesc_IRLock_2eproto();
  friend void protobuf_AssignDesc_IRLock_2eproto();
  friend void protobuf_ShutdownFile_IRLock_2eproto();

  void InitAsDefaultInstance();
  static IRLock* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// IRLock

// required int64 time_usec = 1;
inline bool IRLock::has_time_usec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IRLock::set_has_time_usec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IRLock::clear_has_time_usec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IRLock::clear_time_usec() {
  time_usec_ = GOOGLE_LONGLONG(0);
  clear_has_time_usec();
}
inline ::google::protobuf::int64 IRLock::time_usec() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.IRLock.time_usec)
  return time_usec_;
}
inline void IRLock::set_time_usec(::google::protobuf::int64 value) {
  set_has_time_usec();
  time_usec_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.IRLock.time_usec)
}

// required int32 signature = 2;
inline bool IRLock::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IRLock::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IRLock::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IRLock::clear_signature() {
  signature_ = 0;
  clear_has_signature();
}
inline ::google::protobuf::int32 IRLock::signature() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.IRLock.signature)
  return signature_;
}
inline void IRLock::set_signature(::google::protobuf::int32 value) {
  set_has_signature();
  signature_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.IRLock.signature)
}

// required float pos_x = 3;
inline bool IRLock::has_pos_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IRLock::set_has_pos_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IRLock::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IRLock::clear_pos_x() {
  pos_x_ = 0;
  clear_has_pos_x();
}
inline float IRLock::pos_x() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.IRLock.pos_x)
  return pos_x_;
}
inline void IRLock::set_pos_x(float value) {
  set_has_pos_x();
  pos_x_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.IRLock.pos_x)
}

// required float pos_y = 4;
inline bool IRLock::has_pos_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IRLock::set_has_pos_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IRLock::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IRLock::clear_pos_y() {
  pos_y_ = 0;
  clear_has_pos_y();
}
inline float IRLock::pos_y() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.IRLock.pos_y)
  return pos_y_;
}
inline void IRLock::set_pos_y(float value) {
  set_has_pos_y();
  pos_y_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.IRLock.pos_y)
}

// required float size_x = 5;
inline bool IRLock::has_size_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IRLock::set_has_size_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IRLock::clear_has_size_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IRLock::clear_size_x() {
  size_x_ = 0;
  clear_has_size_x();
}
inline float IRLock::size_x() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.IRLock.size_x)
  return size_x_;
}
inline void IRLock::set_size_x(float value) {
  set_has_size_x();
  size_x_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.IRLock.size_x)
}

// required float size_y = 6;
inline bool IRLock::has_size_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IRLock::set_has_size_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IRLock::clear_has_size_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IRLock::clear_size_y() {
  size_y_ = 0;
  clear_has_size_y();
}
inline float IRLock::size_y() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.IRLock.size_y)
  return size_y_;
}
inline void IRLock::set_size_y(float value) {
  set_has_size_y();
  size_y_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.IRLock.size_y)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace sensor_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IRLock_2eproto__INCLUDED
